
GUI handling 방식
Graphic User "Interface" -> 비유: 얼굴
-> 마련된 아이콘을 클릭하는 행위
-> "눈으로 이해하지 않아도 사용할 수 있게 된다."
-> 아이콘을 '외우는 순간' 사용할 수 있게 된다.
		
윈도우 단축키
win + 윗방향키, 아랫방향키, 옆방향키 / 최대, 최소화, 좌우 정렬
win + tab / 가상 데스크탑 기능 활용
win + ctrl + 좌우방향키 -> 가상데스크탑 이동

ctrl+ shift + N / 새폴더	

브라우저 단축키
Ctrl + n / 새 창 열기
Ctrl + w / 현재 탭 닫기
Ctrl + t / 새 탭을 열어 이동
Ctrl + Shift + t / 마지막으로 닫은 탭 다시 열어 이동
Ctrl + Tab 또는 Ctrl + PgDn / 다음에 연 탭으로 이동
Ctrl + Shift + Tab 또는 Ctrl + PgUp / 이전에 연 탭으로 이동
Ctrl + 1~8 / 특정 탭으로 이동
Ctrl + 9 / 마지막 탭으로 이동
Alt + Home / 현재 탭에서 홈페이지 열기
Alt + 왼쪽 화살표 / 현재 탭의 인터넷 사용기록에 저장된 이전 페이지 열기 
Alt + 오른쪽 화살표 / 현재 탭의 인터넷 사용기록에 저장된 다음 페이지 열기 
Alt + 스페이스바 + n / 현재 창 최소화
Alt + 스페이스바 + x / 현재 창 최대화
Ctrl + Shift + q / Chrome 종료


OS operation system: 윈도우 사용 방법
윈도우 일반 소비자 -> 제작자로서의 사용성을 확인

윈도우, MacOs -> 모든 기능은 키보드로 핸들 가능

Folder: 서류철
-> directory: 디렉토리로 칭한다.
wrapping: 감싸다
parent-child relationship: tree structure (부모-자식 관계: 트리 구조)
-> relation
-> 나중에는 HTML structure theory, DB structure
-> will be the structure of the application 애플리케이션의 구조가 될 것

* TIP
부모 (큰 것) -> 세부 -> 타고 내려가서 결국에 마지막 경로(PATH)
연산 = 사람때문에 만들어진 개념
사람은 '유추'하는 데 특화되어있음
'추론' -> '추상화' (abstraction)
-> '구어체'로 설명하면 이해하는데 큰 도움이 됨

모든 작업이 가지 치기다.
모든 개발은 나무뿌리부터 시작한다.  
아이디어가 나뭇가지가 될 순 없다.

복습하는 습관 들이기: 내일, 내일 모레
추론하는 것도! 

* 외울 것
구문 작성법 syntax -> 암기
태그 이것저것 써보기
---
* 이해해야 할 것
구문 분석 parsing: '이런 방식으로 읽어줘'
변형 가능함 

* To do list
문서 태그 이용해서 만들어보기
구어체로 오늘 학습한 거 설명해보기

코딩 x markup 하고 있다
프로그래밍이 아닌 "미리 약속된 표기법으로 문서를 만들고 있다."
문서를 어디에 사용해야 할지 고민해보아야 함
어떤 기능을 추가할 수 있을지 생각

---
객관적이지 않은 시선을 비판적으로
학습 비용 / 기회 비용

암묵지 tacit knowledge
Tacit knowledge can be used interchageably. But they are not same.
tacit knowledge -> implicit knowledge ->explicit knowledge

필기는 "내꺼'로
"자산": 지식 자산 :자산화 하기"

---

TEXT Editor: 글자를 편집하는 편의도구
-> 메모장, VSCODE: Visual Studio CODE (파란 리본 아이콘) 등
-> 편집 편의만 있고 개발 자체의 기능은 없다.

사용자들이 IDE처럼 발전시킴
-> 내가 필요한 만큼만 설치해서 customize
*주변 지식
마이크로소프트 소유, chatgpt 인수하여 생성 AI가 계속 도입됨
---

IDE: Integration Development Environment 통합개발환경
-> Visula Studio (보라색 리본 아이콘)
-> 개발을 위한 모든 기능 포함
-> 단점: 무거움
-> C언어를 위해 사용

Typescript (javascript)

개발도구
기본적으로 '기능' 위주. '편의'는 많지 않음
-> 최종사용자가: 개발자
-> 개발자가 원하는 기능만 들어있다.
예쁜 기능은 없다.
일반인들을 위한 문서 편집기와 다르지는 않음

기능이 없어서 '못하는'경우보다
기능을 만들어쓰는 경우가 훨씬 더 많다.
플러그인으로 다 직접만들진 않는다. (개발도구)

VSCODE는 모듈		방식으로 '개발자화' 시키는 방식
조각 + 조각 + 조각 = 내가 원하는 기능을 맞춰 사용


모바일 애플리케이션 설치와 다르지 않음. 앱 스토어 = Extensions

1. 한글 팩 (korean Language Pack)

디렉토리 기준으로 움직인다.
파일 보다 폴더 열기를 더 많이 이용
폴더, 디렉토리 = 프로젝트
모든 개발 에디터는 프로젝트 기준으로 여는 편

시작 시 프로젝트를 만든다. 파일은 에디터에서 만든다.

---
VS CODE 단축키
Ctrl + P / palette
-> 검색방식으로 파일을 찾는 편
Ctrl + t / 파일 끄기
Alt + 1~9 / 파일 탭 이동
Ctrl + +, - / 화면 확장 축소

Degging: 디버깅 방법 중 하나
웹 브라우저의 검사도구(개발자도구) inspector
버그 vs 에러
버그: 예상치 못한 현상(안좋은 것), 에러: 잘못된 것(감사한 것)

---

일반소비자의 경험
"종이를 받아보고도 이게 종이인지 모를만큼 기능이 많은 서류뭉치를 보고 있었다."

개발자의 입장
"일반인은 서류를 싫어한다. 어떨게든 서류처럼 보이지 않아야한다."

HTML의 원래 목적은 연구 논문을 빠르게 전달하려고 만든 규칙 이었음.


---

문서를 직접 작성하는 경험이 반드시 필요하다.
ex) 달걀
테이블 태그를 이용하여 문서 만들어보기
문서가 망하든 잘되든 만들어보기
66일 

--
토요일 일요일 계획도 잘 세워보기
1년 48주 -> 24주
26번의 기회가 있다. 평범한 사람들이 낭비하는 주말을 내시간으로 보내는 연습할 기회
---
금 오후: 일상으로 보낼 것 / 저녁: 조금 더 여우롭고 즐거운 것
토요일: 스케줄대로
일요일: 완전한 휴식 및 6시 이후에는 강제적으로 아무것도 안하기	
---
웹 브라우저를 기반으로 동작하는 '프로그램'
미설치형 애플리케이션
-> javascript를 사용하여 만듬. (금수저, 나쁨)		

구글: 기본 앱시리즈
마소: 기본 앱시리즈
노션: 
네이버:

노션의 장점
1. 크로스 플랫폼: OS를 구분치 않는다.
2. 웹 브라우저로도 사용하는데 아무런 제약 X
3. 회사에서 더러 사용(개발회사)

github
1. github는 최근 웹 애플리케이션으로 강력하게 전환되고 있다. (개발자가 이 서비스에 중독되도록)

위 프로그램 모두 웹 브라우저에서 돌아가는 '프로그램' 앱 = 웹 앱
웹앱을 만드는 가장 큰 기축 = java script 그래서 금수저

HTML은 jasvascript로 만들어졌다고 보아도 무방하다.
Web browser는 javascript를 '읽는' 도구이다.
HTLML을 작성하면 javascript 코드로 바뀌고
-> 바낀 코드를 웹 즈라우저가 읽는다.
-> 0101000 기계어로 바뀌는 형태

위 일을 하는 사람 소프트웨이 개발자 = 웹 서비스 개발자 라고 할 수 있음
너무 웹서비스가 대증화되어있어서

javascript 인식
현재 대체제가 사실상 없다.
오히려 대안책만 나오고 있다.
대안책 마저도 javascript를 최종 형태로 쓰고 있음.
---
얼마나 배워왔는가가 아닌 새로운 것을 어떻게 획득하는가에대한 문제
꼭 프로그래밍 언어를 알아야만 코딩 할 수 있나
---
문제 해결 능력(강사가 강조한 부분)
1. 내가 문제를 만났을 때 어떻게 바라보느냐
-> 해결 할 수 있다고 스스로를 자신하는 방식
2. 답은 이미 존재한다는 믿음
---
프로그래밍의 첫번째 행동
자연어 natural language " 사람말"
의사 코드 pseudo code
한글로 항목화 시키는 것
절차: procedure